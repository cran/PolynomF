useDynLib(PolynomF, .registration = TRUE)

importFrom("stats", "deriv", "poly", "predict", "coef")
importFrom("graphics", "lines", "par", "plot", "points")

export(as.polylist, as.polynom, change.origin, integral, is.polylist,
        is.polynom, LCM, GCD, poly.calc, poly.from.roots,
        poly.from.values, poly.from.zeros, poly.orth, polylist,
        polynom)
        
S3method("[", polylist)
S3method(GCD, polylist)
S3method(GCD, polynom)
S3method(LCM, polylist)
S3method(LCM, polynom)
S3method(Math, polynom)
S3method(Ops, polylist)
S3method(Ops, polynom)
S3method(Summary, polylist)
S3method(Summary, polynom)
S3method(as.character, polynom)
S3method(as.function, polylist)
S3method(as.function, polynom)
S3method(c, polylist)
S3method(c, polynom)
S3method(change.origin, default)
S3method(change.origin, polylist)
S3method(change.origin, polynom)
S3method(coef, polylist)
S3method(coef, polynom)
S3method(deriv, polylist)
S3method(deriv, polynom)
S3method(integral, default)
S3method(integral, polylist)
S3method(integral, polynom)
S3method(lines, polylist)
S3method(lines, polynom)
S3method(plot, polylist)
S3method(plot, polynom)
S3method(points, polylist)
S3method(points, polynom)
S3method(predict, polylist)
S3method(predict, polynom)
S3method(print, polylist)
S3method(print, polynom)
S3method(print, summary.polynom)
S3method(rep, polylist)
S3method(rep, polynom)
S3method(solve, polylist)
S3method(solve, polynom)
S3method(summary, polylist)
S3method(summary, polynom)
S3method(unique, polylist)
